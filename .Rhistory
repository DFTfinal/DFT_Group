# 1- Load the Libraries:-
library(tidyr)
library(dplyr)
library(stringr)
library(reshape2)
library(rlang)
library(ggplot2)
# 2- Import the data:-
# 1st Dataset:
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
# 3rd Dataset:
covid19_cases_by_homelessness_status <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_cases_by_homelessness_status.csv")
View(covid19_cases_by_homelessness_status)
3- Data Wrangling:-
# 3a: Subset only variables of interest in the 1st Dataset.
total_no_of_cases_1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_1)
# 3b: Transpose all dates to match counties.
total_no_of_cases_2 <- total_no_of_cases_1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_2)
# 3c: Remove the extra "X" letter from the date column to better join with the other datasets.
typeof(total_no_of_cases_2$date)  # check what data type is the date column.
nchar(total_no_of_cases_2$date)   # check how many characters in this string date column.
total_no_of_cases_2$date <- substr(total_no_of_cases_2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_2)
total_no_of_cases_2$date <- substr(total_no_of_cases_2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_2)
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 3- Data Wrangling:-
# 3a: Subset only variables of interest in the 1st Dataset.
total_no_of_cases_1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_1)
total_no_of_cases_2 <- total_no_of_cases_1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_2)
total_no_of_cases_2$date <- substr(total_no_of_cases_2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_2)
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
otal_no_of_cases_WR1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_WR1)
# 3a: Subset only variables of interest in the 1st Dataset.
total_no_of_cases_WR1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_WR1)
# 3b: Transpose all dates to match counties.
total_no_of_cases_WR2 <- total_no_of_cases_1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_WR2)
# 3b: Transpose all dates to match counties.
total_no_of_cases_WR2 <- total_no_of_cases_WR1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_WR2)
total_no_of_cases_WR2$date <- substr(total_no_of_cases_WR2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_WR2)
# 3d: Filtering only for San Francisco county.
total_no_of_cases_WR3 <- filter(total_no_of_cases_WR2, county == "San Francisco")
View(total_no_of_cases_WR3)
# First, we'll merge  as an Outer Join "total_no_of_cases_2" with "covid19_homeless_impact" by 'date' & 'county'
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR3, covid19_homeless_impact, by=c("date","county"))
View(covid19_homeless_impact_WR1)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
View(covid19_homeless_impact)
# 2- Import the data:-
# 1st Dataset:
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
# 3rd Dataset:
covid19_cases_by_homelessness_status <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_cases_by_homelessness_status.csv")
View(covid19_cases_by_homelessness_status)
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
# 3rd Dataset:
covid19_cases_by_homelessness_status <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_cases_by_homelessness_status.csv")
View(covid19_cases_by_homelessness_status)
total_no_of_cases_WR1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_WR1)
total_no_of_cases_WR1 <- filter(total_no_of_cases_WR1, county == "San Francisco")
View(total_no_of_cases_WR1)
total_no_of_cases_WR2 <- total_no_of_cases_WR1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_WR2)
total_no_of_cases_WR2$date <- substr(total_no_of_cases_WR2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_WR2)
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR2, covid19_homeless_impact, by=c("date","county"))
View(covid19_homeless_impact_WR1)
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR2, covid19_homeless_impact, by=c("date"))
View(covid19_homeless_impact_WR1)
# First, we'll merge  as an Outer Join "total_no_of_cases_2" with "covid19_homeless_impact" by 'date' & 'county'
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR2, covid19_homeless_impact, by=c("date","county"))
View(covid19_homeless_impact_WR1)
# Second, we'll merge this clean Dataset "covid19_homeless_impact_WR1" with our final 3rd Dataset "covid19_cases_by_homelessness_status" to add more variables of interests.
covid19_homeless_impact_WR2 <- merge(covid19_homeless_impact_WR1, covid19_cases_by_homelessness_status, by.x=c("date"), by.y=c("specimen_collection_date"))
View(covid19_homeless_impact_WR2)
write.csv(covid19_homeless_impact_WR2, "C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/covid19_homeless_impact_WR2.csv", row.names = FALSE)
library("car")
library("caret")
library("gvlma")
library("predictmeans")
library("e1071")
covid19_homeless_impact_WR2_py <- read.csv("C:/Users/korab/Desktop/data science/Git Projects/DFT_Group/covid19_homeless_impact_WR2_py.csv")
View(covid19_homeless_impact_WR2_py)
#Importing Dataset
SFR <- covid19_homeless_impact_WR2.python
#Importing Dataset
SFR <- covid19_homeless_impact_WR2_py
library("car")
library("caret")
library("gvlma")
library("predictmeans")
library("e1071")
#Importing Dataset
SFR <- covid19_homeless_impact_WR2_py
view(SFR)
View(covid19_cases_by_homelessness_status)
View(covid19_cases_by_homelessness_status)
View(covid19_homeless_impact)
View(covid19_homeless_impact_WR1)
View(covid19_homeless_impact_WR2)
View(covid19_homeless_impact_WR2_py)
# Testing Linearity
scatter.smooth(x=SFR$homless_population_by_percentage, y=SFR$general_public_population_by_percentage, main="General Public cases vs Homeless cases")
#Testing for Homoscedasticity.
### Creating a linear Model
lmMod <- lm(general_public_population_by_percentage~homless_population_by_percentage, data=SFR)
par(mfrow=c(2,2))
plot(lmMod)
#Further test for heteroscedasticity with Breush-Pagan test and NCV
lmtest::bptest(lmMod)
distBCMod1 <- caret::BoxCoxTrans(SFR$general_public_population_by_percentage)
print(distBCMod1)
## Binding to our dataset
SFRR <- cbind(SFR, dist_newM=predict(distBCMod1, SFR$general_public_population_by_percentage))
lmMod_bc2 <- lm(dist_newM~homless_population_by_percentage, data=SFRR)
lmtest::bptest(lmMod_bc2)
library(sandwich)
library("sandwich")
# Testing for outliers
CookD(lmMod, group=NULL, plot=TRUE, idn=3, newwd=TRUE)
install.packages("gmodels")
library(gmodels)
library(tidyr)
library(dplyr)
library(stringr)
library(reshape2)
library(rlang)
library(ggplot2)
library(gmodels)
covid19_homeless_impact_Final <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/covid19_homeless_impact_Final.csv")
View(covid19_homeless_impact_Final)
covid19_homeless_impact_Final$cumulative_homeless_cases_R < N/A
covid19_homeless_impact_Final$cumulative_homeless_cases_R[covid19_homeless_impact_Final$cumulative_homeless_cases <= 165] <- 0
covid19_homeless_impact_Final$cumulative_homeless_cases_R[covid19_homeless_impact_Final$cumulative_homeless_cases > 165]  <- 1
View(covid19_homeless_impact_Final)
covid19_homeless_impact_Final$rooms_available_R < N/A
covid19_homeless_impact_Final$rooms_available_R[covid19_homeless_impact_Final$rooms_available <= 866] <- 0
covid19_homeless_impact_Final$rooms_available_R[covid19_homeless_impact_Final$rooms_available > 866]  <- 1
View(covid19_homeless_impact_Final)
CrossTable(covid19_homeless_impact_Final$cumulative_homeless_cases_R, covid19_homeless_impact_Final$rooms_available_R, fisher=TRUE, chisq = TRUE, expected = TRUE, sresid=TRUE, format="SPSS")
ggplot(covid19_homeless_impact_Final, aes(x = cumulative_homeless_cases_R, y = rooms_available_R)) + geom_boxplot(aes(group=rooms_available_R))
xlab("Height (in cm)")
ggplot(data=covid19_homeless_impact_Final) +
geom_bar(mapping = aes(x = cumulative_homeless_cases_R, fill=rooms_available_R)) +
ggtitle("Rooms AVailable per cases") +
xlab("Sales Category") +
ylab("Frequency")
ggplot(covid19_homeless_impact_Final, aes(x = cumulative_homeless_cases_R, y = rooms_available_R)) + geom_boxplot(aes(group=rooms_available_R))
covid19_homeless_impact_Final.cumulative_homeless_cases.tail()
tail(covid19_homeless_impact_Final.cumulative_homeless_cases)
observed = c(246, 6177)
expected = c(0.80, 0.1
observed = c(246, 6177)
expected = c(0.80, 0.10)
# 3c: Run Analysis:
observed = c(246, 6177)
expected = c(0.80, 0.20)
chisq.test(x = observed, p = expected)
prop.test(x = c(246, 6177), n = c(9784, 873521),
alternative = "two.sided")
# Off of the homeless_population, there are 246 covid19 positive cases and of the general_public_population, there are 6177 covid19 positive cases.
prop.test(x = c(246, 6177), n = c(9784, 873521),
alternative = "greater")
prop.test(x = c(246, 6177), n = c(9784, 873521),
alternative = "less")
# Off of the homeless_population, there are 246 covid19 positive cases and of the general_public_population, there are 6177 covid19 positive cases.
prop.test(x = c(246, 6177), n = c(9784, 873521),
alternative = "two.sided")
prop.test(x = 246, n = 6423, alternative = "less")
SFR <- covid19_homeless_impact_Final
scatter.smooth(x=SFR$homless_population_by_percentage, y=SFR$general_public_population_by_percentage, main="General Public cases vs Homeless cases")
lmMod <- lm(general_public_population_by_percentage~homless_population_by_percentage, data=SFR)
par(mfrow=c(2,2))
plot(lmMod)
lmtest::bptest(lmMod)
distBCMod1 <- caret::BoxCoxTrans(SFR$general_public_population_by_percentage)
print(distBCMod1)
SFRR <- cbind(SFR, dist_newM=predict(distBCMod1, SFR$general_public_population_by_percentage))
lmMod_bc2 <- lm(dist_newM~homless_population_by_percentage, data=SFRR)
lmtest::bptest(lmMod_bc2)
CookD(lmMod, group=NULL, plot=TRUE, idn=3, newwd=TRUE)
library(car)
library(caret)
library(gvlma)
library(predictmeans)
library(e1071)
library(sandwich)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
library(car)
library(caret)
library(car)
library(caret)
library(gvlma)
library(predictmeans)
library(predictmeans)
library(e1071)
library(sandwich)
library(car)
library(caret)
library(gvlma)
library(predictmeans)
library(e1071)
library(sandwich)
CookD(lmMod, group=NULL, plot=TRUE, idn=3, newwd=TRUE)
lev = hat(model.matrix(lmMod))
plot(lev)
plot(lev)
SFR[lev>.2,]
car::outlierTest(lmMod)
summary(influence.measures(lmMod))
summary(lmMod_bc2)
library(rcompanion)
library(IDPmisc)
library(rstatix)
Finally <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Finally.csv")
View(Finally)
counties <-Finally
keeps <- c("ï..county","X.April", "X.May", "X.June", "X.July")
counties2 <- counties[keeps]
counties3 <- counties2[c(10,15,38,56),]
plotNormalHistogram(counties3$X.April)
plotNormalHistogram(sqrt(counties3$X.April))
plotNormalHistogram(counties3$X.April)
plotNormalHistogram(sqrt(counties3$X.April))
plotNormalHistogram(counties3$X.May)
plotNormalHistogram(counties3$X.June)
plotNormalHistogram(counties3$X.June ^2)
plotNormalHistogram(counties3$X.July)
plotNormalHistogram(log(counties3$X.July))
leveneTest(repdat ~ Treatment.Group*contrasts, data=counties21)
