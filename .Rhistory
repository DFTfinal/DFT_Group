# 1- Load the Libraries:-
library(tidyr)
library(dplyr)
library(stringr)
library(reshape2)
library(rlang)
library(ggplot2)
# 2- Import the data:-
# 1st Dataset:
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
# 3rd Dataset:
covid19_cases_by_homelessness_status <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_cases_by_homelessness_status.csv")
View(covid19_cases_by_homelessness_status)
3- Data Wrangling:-
# 3a: Subset only variables of interest in the 1st Dataset.
total_no_of_cases_1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_1)
# 3b: Transpose all dates to match counties.
total_no_of_cases_2 <- total_no_of_cases_1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_2)
# 3c: Remove the extra "X" letter from the date column to better join with the other datasets.
typeof(total_no_of_cases_2$date)  # check what data type is the date column.
nchar(total_no_of_cases_2$date)   # check how many characters in this string date column.
total_no_of_cases_2$date <- substr(total_no_of_cases_2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_2)
total_no_of_cases_2$date <- substr(total_no_of_cases_2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_2)
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 3- Data Wrangling:-
# 3a: Subset only variables of interest in the 1st Dataset.
total_no_of_cases_1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_1)
total_no_of_cases_2 <- total_no_of_cases_1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_2)
total_no_of_cases_2$date <- substr(total_no_of_cases_2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_2)
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
otal_no_of_cases_WR1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_WR1)
# 3a: Subset only variables of interest in the 1st Dataset.
total_no_of_cases_WR1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_WR1)
# 3b: Transpose all dates to match counties.
total_no_of_cases_WR2 <- total_no_of_cases_1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_WR2)
# 3b: Transpose all dates to match counties.
total_no_of_cases_WR2 <- total_no_of_cases_WR1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_WR2)
total_no_of_cases_WR2$date <- substr(total_no_of_cases_WR2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_WR2)
# 3d: Filtering only for San Francisco county.
total_no_of_cases_WR3 <- filter(total_no_of_cases_WR2, county == "San Francisco")
View(total_no_of_cases_WR3)
# First, we'll merge  as an Outer Join "total_no_of_cases_2" with "covid19_homeless_impact" by 'date' & 'county'
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR3, covid19_homeless_impact, by=c("date","county"))
View(covid19_homeless_impact_WR1)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
View(covid19_homeless_impact)
# 2- Import the data:-
# 1st Dataset:
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
# 3rd Dataset:
covid19_cases_by_homelessness_status <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_cases_by_homelessness_status.csv")
View(covid19_cases_by_homelessness_status)
total_no_of_cases <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/total_no_of_cases.csv")
View(total_no_of_cases)
# 2nd Dataset:
covid19_homeless_impact <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_homeless_impact.csv")
View(covid19_homeless_impact)
# 3rd Dataset:
covid19_cases_by_homelessness_status <- read.csv("C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/Original_Datasets/covid19_cases_by_homelessness_status.csv")
View(covid19_cases_by_homelessness_status)
total_no_of_cases_WR1 <- total_no_of_cases[, 11:119]
View(total_no_of_cases_WR1)
total_no_of_cases_WR1 <- filter(total_no_of_cases_WR1, county == "San Francisco")
View(total_no_of_cases_WR1)
total_no_of_cases_WR2 <- total_no_of_cases_WR1 %>%
gather(date, cumulative_population_cases, X4.15.2020:X7.31.2020)
View(total_no_of_cases_WR2)
total_no_of_cases_WR2$date <- substr(total_no_of_cases_WR2$date, 2, 10)        # Extract all remaining 9 characters but not the X
View(total_no_of_cases_WR2)
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR2, covid19_homeless_impact, by=c("date","county"))
View(covid19_homeless_impact_WR1)
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR2, covid19_homeless_impact, by=c("date"))
View(covid19_homeless_impact_WR1)
# First, we'll merge  as an Outer Join "total_no_of_cases_2" with "covid19_homeless_impact" by 'date' & 'county'
covid19_homeless_impact_WR1 <- merge(total_no_of_cases_WR2, covid19_homeless_impact, by=c("date","county"))
View(covid19_homeless_impact_WR1)
# Second, we'll merge this clean Dataset "covid19_homeless_impact_WR1" with our final 3rd Dataset "covid19_cases_by_homelessness_status" to add more variables of interests.
covid19_homeless_impact_WR2 <- merge(covid19_homeless_impact_WR1, covid19_cases_by_homelessness_status, by.x=c("date"), by.y=c("specimen_collection_date"))
View(covid19_homeless_impact_WR2)
write.csv(covid19_homeless_impact_WR2, "C:/Users/engma/Desktop/BST/DSO110-Final Group Project/DFT_Group/covid19_homeless_impact_WR2.csv", row.names = FALSE)
library("car")
library("caret")
library("gvlma")
library("predictmeans")
library("e1071")
covid19_homeless_impact_WR2_py <- read.csv("C:/Users/korab/Desktop/data science/Git Projects/DFT_Group/covid19_homeless_impact_WR2_py.csv")
View(covid19_homeless_impact_WR2_py)
#Importing Dataset
SFR <- covid19_homeless_impact_WR2.python
#Importing Dataset
SFR <- covid19_homeless_impact_WR2_py
library("car")
library("caret")
library("gvlma")
library("predictmeans")
library("e1071")
#Importing Dataset
SFR <- covid19_homeless_impact_WR2_py
view(SFR)
View(covid19_cases_by_homelessness_status)
View(covid19_cases_by_homelessness_status)
View(covid19_homeless_impact)
View(covid19_homeless_impact_WR1)
View(covid19_homeless_impact_WR2)
View(covid19_homeless_impact_WR2_py)
# Testing Linearity
scatter.smooth(x=SFR$homless_population_by_percentage, y=SFR$general_public_population_by_percentage, main="General Public cases vs Homeless cases")
#Testing for Homoscedasticity.
### Creating a linear Model
lmMod <- lm(general_public_population_by_percentage~homless_population_by_percentage, data=SFR)
par(mfrow=c(2,2))
plot(lmMod)
#Further test for heteroscedasticity with Breush-Pagan test and NCV
lmtest::bptest(lmMod)
distBCMod1 <- caret::BoxCoxTrans(SFR$general_public_population_by_percentage)
print(distBCMod1)
## Binding to our dataset
SFRR <- cbind(SFR, dist_newM=predict(distBCMod1, SFR$general_public_population_by_percentage))
lmMod_bc2 <- lm(dist_newM~homless_population_by_percentage, data=SFRR)
lmtest::bptest(lmMod_bc2)
library(sandwich)
library("sandwich")
# Testing for outliers
CookD(lmMod, group=NULL, plot=TRUE, idn=3, newwd=TRUE)
#One propotion ztest
prop.test(x = 246, n = 6423, alternative = "less")
#Importing Dataset
SFR <- covid19_homeless_impact_WR2_py
# Linear Regression for QN: Are the number of homeless cases affecting the general public
library("car")
library("caret")
library("gvlma")
library("predictmeans")
library("e1071")
library("sandwich")
o
# Testing Linearity
scatter.smooth(x=SFR$homless_population_by_percentage, y=SFR$general_public_population_by_percentage, main="General Public cases vs Homeless cases")
#Testing for Homoscedasticity.
### Creating a linear Model
lmMod <- lm(general_public_population_by_percentage~homless_population_by_percentage, data=SFR)
par(mfrow=c(2,2))
plot(lmMod)
#Further test for heteroscedasticity with Breush-Pagan test
lmtest::bptest(lmMod)
quadPlot <- ggplot(SFR, aes(x = homless_population_by_percentage, y=general_public_population_by_percentage)) + geom_point() + stat_smooth(method = "lm", formula = y ~x + I(x^2), size =1)
quadPlot
homelesssq <- SFR$homless_population_by_percentage^2
quadModel <- lm(SFR$general_public_population_by_percentage~SFR$homless_population_by_percentage+homelesssq)
summary(quadModel)
exMod <- lm(log(SFR$general_public_population_by_percentage)~SFR$homless_population_by_percentage)
summary(exMod)
